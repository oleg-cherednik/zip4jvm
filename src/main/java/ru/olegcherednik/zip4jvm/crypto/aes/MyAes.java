package ru.olegcherednik.zip4jvm.crypto.aes;

/**
 * @author Oleg Cherednik
 * @since 22.11.2022
 */
public class MyAes {

    public static final int AES_BLOCK_SIZE = 16;
    private static final int AES_NUM_IVMRK_WORDS = (1 + 1 + 15) * 4;

    private AesCodeFunc g_AesCbc_Encode;
    private AesCodeFunc g_AesCbc_Decode;
    private AesCodeFunc g_AesCtr_Code;
    private AesCodeFunc _codeFunc;

    private int _keySize;
    private boolean _keyIsSet;
    private boolean _encodeMode;
    private int _offset;
    private long[] _aes = new long[AES_NUM_IVMRK_WORDS + 3];
    private byte[] _iv = new byte[AES_BLOCK_SIZE];

    public MyAes() {
        AesGenTables();
    }

    private void AesGenTables() {
        for (int i = 0; i < 256; i++)
            InvS[Sbox[i]] = i;

        for (int i = 0; i < 256; i++) {
            {
                int a1 = Sbox[i];
                int a2 = xtime(a1);
                int a3 = a2 ^ a1;
                T[TT(0, i)] = Ui32(a2, a1, a1, a3);
                T[TT(1, i)] = Ui32(a3, a2, a1, a1);
                T[TT(2, i)] = Ui32(a1, a3, a2, a1);
                T[TT(3, i)] = Ui32(a1, a1, a3, a2);
            }
            {
                int a1 = InvS[i];
                int a2 = xtime(a1);
                int a4 = xtime(a2);
                int a8 = xtime(a4);
                int a9 = a8 ^ a1;
                int aB = a8 ^ a2 ^ a1;
                int aD = a8 ^ a4 ^ a1;
                int aE = a8 ^ a4 ^ a2;
                D[DD(0, i)] = Ui32(aE, a9, aD, aB);
                D[DD(1, i)] = Ui32(aB, aE, a9, aD);
                D[DD(2, i)] = Ui32(aD, aB, aE, a9);
                D[DD(3, i)] = Ui32(a9, aD, aB, aE);
            }
        }

        g_AesCbc_Encode = new AesCbcEncode();
        g_AesCbc_Decode = new AesCbcDecode();
        g_AesCtr_Code = new AesCtrCode();
    }

    public void init(boolean encodeMode, int keySize) {
        _keySize = keySize;
        _keyIsSet = false;
        _encodeMode = encodeMode;
        _offset = 3;
        SetFunctions(1);
    }

    private static int TT(int x, int i) {
        return (x << 8) + i;
    }

    private static int DD(int x, int i) {
        return (x << 8) + i;
    }

    private static int xtime(int x) {
        return ((x << 1) ^ ((x & 0x80) != 0 ? 0x1B : 0)) & 0xFF;
    }

    private static long Ui32(long a0, long a1, long a2, long a3) {
        return a0 | (a1 << 8) | (a2 << 16) | (a3 << 24);
    }

    private boolean SetFunctions(int algo) {
        _codeFunc = _encodeMode ? g_AesCbc_Encode : g_AesCbc_Decode;
        if (algo == 1) {
            _codeFunc = _encodeMode ? new AesCbcEncode() : new AesCbcDecode();
        }
        return true;
    }

//    public boolean SetKey(byte[] data, int size) {
//        if ((size & 0x7) != 0 || size < 16 || size > 32)
//            return E_INVALIDARG;
//        if (_keySize != 0 && size != _keySize)
//            return E_INVALIDARG;
//        AES_SET_KEY_FUNC setKeyFunc = _encodeMode ? Aes_SetKey_Enc : Aes_SetKey_Dec;
//        setKeyFunc(_aes + _offset + 4, data, size);
//        _keyIsSet = true;
//        return S_OK;
//    }

    private final int[] InvS = new int[256];
    private final long[] T = new long[256 * 4];
    private final long[] D = new long[256 * 4];

    private final int[] Sbox = {
            0x63, 0x7c, 0x77, 0x7b, 0xf2, 0x6b, 0x6f, 0xc5, 0x30, 0x01, 0x67, 0x2b, 0xfe, 0xd7, 0xab, 0x76,
            0xca, 0x82, 0xc9, 0x7d, 0xfa, 0x59, 0x47, 0xf0, 0xad, 0xd4, 0xa2, 0xaf, 0x9c, 0xa4, 0x72, 0xc0,
            0xb7, 0xfd, 0x93, 0x26, 0x36, 0x3f, 0xf7, 0xcc, 0x34, 0xa5, 0xe5, 0xf1, 0x71, 0xd8, 0x31, 0x15,
            0x04, 0xc7, 0x23, 0xc3, 0x18, 0x96, 0x05, 0x9a, 0x07, 0x12, 0x80, 0xe2, 0xeb, 0x27, 0xb2, 0x75,
            0x09, 0x83, 0x2c, 0x1a, 0x1b, 0x6e, 0x5a, 0xa0, 0x52, 0x3b, 0xd6, 0xb3, 0x29, 0xe3, 0x2f, 0x84,
            0x53, 0xd1, 0x00, 0xed, 0x20, 0xfc, 0xb1, 0x5b, 0x6a, 0xcb, 0xbe, 0x39, 0x4a, 0x4c, 0x58, 0xcf,
            0xd0, 0xef, 0xaa, 0xfb, 0x43, 0x4d, 0x33, 0x85, 0x45, 0xf9, 0x02, 0x7f, 0x50, 0x3c, 0x9f, 0xa8,
            0x51, 0xa3, 0x40, 0x8f, 0x92, 0x9d, 0x38, 0xf5, 0xbc, 0xb6, 0xda, 0x21, 0x10, 0xff, 0xf3, 0xd2,
            0xcd, 0x0c, 0x13, 0xec, 0x5f, 0x97, 0x44, 0x17, 0xc4, 0xa7, 0x7e, 0x3d, 0x64, 0x5d, 0x19, 0x73,
            0x60, 0x81, 0x4f, 0xdc, 0x22, 0x2a, 0x90, 0x88, 0x46, 0xee, 0xb8, 0x14, 0xde, 0x5e, 0x0b, 0xdb,
            0xe0, 0x32, 0x3a, 0x0a, 0x49, 0x06, 0x24, 0x5c, 0xc2, 0xd3, 0xac, 0x62, 0x91, 0x95, 0xe4, 0x79,
            0xe7, 0xc8, 0x37, 0x6d, 0x8d, 0xd5, 0x4e, 0xa9, 0x6c, 0x56, 0xf4, 0xea, 0x65, 0x7a, 0xae, 0x08,
            0xba, 0x78, 0x25, 0x2e, 0x1c, 0xa6, 0xb4, 0xc6, 0xe8, 0xdd, 0x74, 0x1f, 0x4b, 0xbd, 0x8b, 0x8a,
            0x70, 0x3e, 0xb5, 0x66, 0x48, 0x03, 0xf6, 0x0e, 0x61, 0x35, 0x57, 0xb9, 0x86, 0xc1, 0x1d, 0x9e,
            0xe1, 0xf8, 0x98, 0x11, 0x69, 0xd9, 0x8e, 0x94, 0x9b, 0x1e, 0x87, 0xe9, 0xce, 0x55, 0x28, 0xdf,
            0x8c, 0xa1, 0x89, 0x0d, 0xbf, 0xe6, 0x42, 0x68, 0x41, 0x99, 0x2d, 0x0f, 0xb0, 0x54, 0xbb, 0x16 };
}
